{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Documents/GitHub/2024DBFP/ui/src/map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LoadScript, GoogleMap } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapWithMarkerCluster = ({\n  selectedRows\n}) => {\n  _s();\n  const [map, setMap] = useState(null);\n  const [center, setCenter] = useState({\n    lat: 25.0718,\n    lng: 121.591982\n  }); // Default center\n  const [zoom, setZoom] = useState(14); // Default zoom level\n  const markersRef = React.useRef([]);\n  const geocodeAddress = address => {\n    return new Promise((resolve, reject) => {\n      const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        address: address\n      }, (results, status) => {\n        if (status === 'OK') {\n          resolve(results[0].geometry.location);\n        } else {\n          reject(`Geocode was not successful for the following reason: ${status}`);\n        }\n      });\n    });\n  };\n  useEffect(() => {\n    if (selectedRows.length > 0) {\n      selectedRows.forEach(row => {\n        console.log(`Hospital Name: ${row.醫院名稱}, Address: ${row.醫院地址}`);\n      });\n      const firstRow = selectedRows[0];\n      geocodeAddress(firstRow.醫院地址).then(location => {\n        setCenter({\n          lat: location.lat(),\n          lng: location.lng()\n        });\n        setZoom(14); // Set zoom level\n      }).catch(error => {\n        console.error(error);\n      });\n    } else {\n      setCenter({\n        lat: 25.0718,\n        lng: 121.591982\n      }); // Reset to default center\n      setZoom(14); // Reset to default zoom\n    }\n  }, [selectedRows]);\n  useEffect(() => {\n    if (map) {\n      // Clear existing markers\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (selectedRows.length > 0) {\n        // Geocode addresses and create markers\n        const newMarkersPromises = selectedRows.map(row => {\n          return geocodeAddress(row.醫院地址).then(location => {\n            const marker = new window.google.maps.Marker({\n              position: {\n                lat: location.lat(),\n                lng: location.lng()\n              },\n              map: map\n            });\n            const infoWindow = new window.google.maps.InfoWindow({\n              content: `<div><strong>${row.醫院名稱}</strong><br>Address: ${row.醫院地址}</div>`\n            });\n            marker.addListener('click', () => {\n              infoWindow.open(map, marker);\n            });\n            return marker;\n          }).catch(error => {\n            console.error(`Geocode failed for address ${row.醫院地址}: ${error}`);\n          });\n        });\n        Promise.all(newMarkersPromises).then(newMarkers => {\n          markersRef.current = newMarkers.filter(marker => marker); // Filter out any undefined markers\n        });\n      }\n    }\n  }, [map, selectedRows]);\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"AIzaSyAFsDAifUDGbzyqqHhf5p415ZvHCPacJZY\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: {\n        width: '100%',\n        height: '600px'\n      },\n      center: center,\n      zoom: zoom,\n      onLoad: map => setMap(map)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(MapWithMarkerCluster, \"yvuT42Ggso/RbGmOVaKPP47uheY=\");\n_c = MapWithMarkerCluster;\nexport default MapWithMarkerCluster;\nvar _c;\n$RefreshReg$(_c, \"MapWithMarkerCluster\");","map":{"version":3,"names":["React","useState","useEffect","LoadScript","GoogleMap","jsxDEV","_jsxDEV","MapWithMarkerCluster","selectedRows","_s","map","setMap","center","setCenter","lat","lng","zoom","setZoom","markersRef","useRef","geocodeAddress","address","Promise","resolve","reject","geocoder","window","google","maps","Geocoder","geocode","results","status","geometry","location","length","forEach","row","console","log","醫院名稱","醫院地址","firstRow","then","catch","error","current","marker","newMarkersPromises","Marker","position","infoWindow","InfoWindow","content","addListener","open","all","newMarkers","filter","googleMapsApiKey","children","mapContainerStyle","width","height","onLoad","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbookpro/Documents/GitHub/2024DBFP/ui/src/map.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { LoadScript, GoogleMap } from '@react-google-maps/api';\n\nconst MapWithMarkerCluster = ({ selectedRows }) => {\n  const [map, setMap] = useState(null);\n  const [center, setCenter] = useState({ lat: 25.0718, lng: 121.591982 }); // Default center\n  const [zoom, setZoom] = useState(14); // Default zoom level\n  const markersRef = React.useRef([]);\n\n  const geocodeAddress = (address) => {\n    return new Promise((resolve, reject) => {\n      const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({ address: address }, (results, status) => {\n        if (status === 'OK') {\n          resolve(results[0].geometry.location);\n        } else {\n          reject(`Geocode was not successful for the following reason: ${status}`);\n        }\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (selectedRows.length > 0) {\n      selectedRows.forEach(row => {\n        console.log(`Hospital Name: ${row.醫院名稱}, Address: ${row.醫院地址}`);\n      });\n\n      const firstRow = selectedRows[0];\n      geocodeAddress(firstRow.醫院地址)\n        .then(location => {\n          setCenter({ lat: location.lat(), lng: location.lng() });\n          setZoom(14); // Set zoom level\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    } else {\n      setCenter({ lat: 25.0718, lng: 121.591982 }); // Reset to default center\n      setZoom(14); // Reset to default zoom\n    }\n  }, [selectedRows]);\n\n  useEffect(() => {\n    if (map) {\n      // Clear existing markers\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n\n      if (selectedRows.length > 0) {\n        // Geocode addresses and create markers\n        const newMarkersPromises = selectedRows.map(row => {\n          return geocodeAddress(row.醫院地址)\n            .then(location => {\n              const marker = new window.google.maps.Marker({\n                position: { lat: location.lat(), lng: location.lng() },\n                map: map,\n              });\n\n              const infoWindow = new window.google.maps.InfoWindow({\n                content: `<div><strong>${row.醫院名稱}</strong><br>Address: ${row.醫院地址}</div>`\n              });\n\n              marker.addListener('click', () => {\n                infoWindow.open(map, marker);\n              });\n\n              return marker;\n            })\n            .catch(error => {\n              console.error(`Geocode failed for address ${row.醫院地址}: ${error}`);\n            });\n        });\n\n        Promise.all(newMarkersPromises).then(newMarkers => {\n          markersRef.current = newMarkers.filter(marker => marker); // Filter out any undefined markers\n        });\n      }\n    }\n  }, [map, selectedRows]);\n\n  return (\n    <LoadScript googleMapsApiKey=\"AIzaSyAFsDAifUDGbzyqqHhf5p415ZvHCPacJZY\"> {/* Replace with your actual API key */}\n      <GoogleMap\n        mapContainerStyle={{ width: '100%', height: '600px' }}\n        center={center}\n        zoom={zoom}\n        onLoad={(map) => setMap(map)}\n      />\n    </LoadScript>\n  );\n};\n\nexport default MapWithMarkerCluster;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}